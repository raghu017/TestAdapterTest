trigger:
- main

variables:
  agentOS: 'Windows'
  buildConfiguration: 'Debug'
  SPXBuild_id: 26702669 # set to 0 to use `dotnet tool install` lastest

pool:
${{ if eq(variables['agentOS'], 'Windows') }}:
  vmImage: windows-latest
${{ else }}:
  vmImage: ubuntu-latest

steps:

  # -----------------------------------------------------------------------------
  # Download the SPX artifact and .net executables
  # -----------------------------------------------------------------------------
  - task: DownloadBuildArtifacts@0
    displayName: Download SPX build artifact (executable)
    inputs:
      buildType: specific
      project: 'e71f1362-9c7d-488b-99c7-3376db8d3302' # Skyman
      pipeline: 13649 # Azure-Samples.cognitive-services-speech-tools
      buildVersionToDownload: specific
      specificBuildWithTriggering: true
      buildId: $(SPXBuild_id)
      downloadType: specific
      downloadPath: spxBuild
    condition: gt(variables['SPXBuild_id'], 0) # only if we have a build_id

  - task: ExtractFiles@1
    displayName: Extract SPX .netcore 3.1 executable
    inputs:
    ${{ if eq(variables['agentOS'], 'Windows') }}:
      archiveFilePatterns: '**/spx-netcore31-win-x64.zip'
    ${{ else }}:
      archiveFilePatterns: '**/spx-netcore31-linux-x64.zip'
      destinationFolder: $(System.DefaultWorkingDirectory)
      cleanDestinationFolder: false
    condition: gt(variables['SPXBuild_id'], 0) # only if we have a build_id

  - task: Bash@3
    displayName: Update path and locationg CLI
    inputs:
      script: |
        echo '##vso[task.setvariable variable=path]$(PATH):~/.dotnet/tools'
        find spx
        find ~/.dotnet/tools/spx
      workingDirectory: $(System.DefaultWorkingDirectory)
    condition: ne(variables['agentOS'], 'Windows') # only if we're on Linux


  # -----------------------------------------------------------------------------
  # OR ... install it as a global .net tool
  # -----------------------------------------------------------------------------
  - task: DotNetCoreCLI@2
    inputs:
      command: 'custom'
      custom: 'tool'
      arguments: 'install --global Microsoft.CognitiveServices.Speech.CLI'
    condition: eq(variables['SPXBuild_id'], 0) # only if we have NO build_id

  # -----------------------------------------------------------------------------
  # Run the tests (this will also publish the results)
  # -----------------------------------------------------------------------------
  - task: DotNetCoreCLI@2
    inputs:
      command: 'test'
      arguments: '--configuration $(buildConfiguration)'
      workingDirectory: $(System.DefaultWorkingDirectory)
