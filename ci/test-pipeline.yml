trigger:
- main

parameters:
- name: vmImage
  type: string
  default: windows-latest
  values:
  - windows-latest
  - ubuntu-latest
  - macOS-latest
- name: 'buildConfiguration'
  type: string
  default: 'Debug'
  values:
  - 'Debug'
  - 'Release'
- name: 'SPXBuild_id'
  type: number
  default: 26783976
  values:
  - 0
  - 26783976

jobs:
- job: SPX_Yaml_Test_Pipeline
  pool:
    vmImage: ${{ parameters.vmImage }}

  steps:

    # -----------------------------------------------------------------------------
    # GET SPX - NO SPXBuild_Id - Install via `dotnet tool install`
    # -----------------------------------------------------------------------------
    - task: DotNetCoreCLI@2      
      displayName: GET SPX - Installing via `dotnet tool install`
      inputs:
        command: 'custom'
        custom: 'tool'
        arguments: 'install --global Microsoft.CognitiveServices.Speech.CLI'
      condition: eq( ${{ parameters.SPXBuild_id }} , 0) # only if we have NO build_id

    # -----------------------------------------------------------------------------
    # GET SPX - Have SPXBuild_Id - Download artifact and unzip
    # -----------------------------------------------------------------------------
    - task: DownloadBuildArtifacts@0
      displayName: GET SPX - Have SPXBuild_id - DOWNLOAD
      inputs:
        buildType: specific
        project: 'e71f1362-9c7d-488b-99c7-3376db8d3302' # Skyman
        pipeline: 13649 # Azure-Samples.cognitive-services-speech-tools
        buildVersionToDownload: specific
        specificBuildWithTriggering: true
        buildId: ${{ parameters.SPXBuild_id }}
        downloadType: specific
        downloadPath: spxBuild
      condition: gt( ${{ parameters.SPXBuild_id }} , 0) # only if we have a build_id

    - task: ExtractFiles@1      
      displayName: GET SPX - Have SPXBuild_id - EXTRACT
      inputs:
        ${{ if eq(parameters.vmImage, 'windows-latest') }}:
          archiveFilePatterns: '**/spx-netcore31-win-x64.zip'
        ${{ else }}:
          archiveFilePatterns: '**/spx-netcore31-linux-x64.zip'
        destinationFolder: $(System.DefaultWorkingDirectory)/src/TestRunner/bin/${{ parameters.buildConfiguration }}/netcoreapp3.1
        cleanDestinationFolder: false
      condition: gt( ${{ parameters.SPXBuild_id }} , 0) # only if we have a build_id

    # -----------------------------------------------------------------------------
    # FIND and CONFIGURE SPX
    # -----------------------------------------------------------------------------
    - task: Bash@3      
      displayName: FIND SPX and SHOW FILES - Linux
      inputs:
        script: |
          echo '##vso[task.setvariable variable=path]$(PATH):~/.dotnet/tools'
          find
          find spx
          find ~/.dotnet/tools/spx
          ./spx config local @region --set $(region)
          ./spx config local @key --set $(key)
          ./spx config local @
      condition: not(eq('${{ parameters.vmImage }}', 'windows-latest'))

    - task: CmdLine@2
      displayName: FIND SPX and SHOW FILES - Windows
      inputs:
        script: |
          dir /s/b
          dir spx* /s/b
          spx config local @region --set $(region)
          spx config local @key --set $(key)
          spx config local @
      condition: eq('${{ parameters.vmImage }}', 'windows-latest')

    # -----------------------------------------------------------------------------
    # Run the tests (this will also publish the results)
    # -----------------------------------------------------------------------------
    - task: DotNetCoreCLI@2
      displayName: RUN TESTS - Restore
      inputs:
        command: 'restore'
        arguments: '--configuration ${{ parameters.buildConfiguration }}'
        workingDirectory: $(System.DefaultWorkingDirectory)

    - task: DotNetCoreCLI@2      
      displayName: RUN TESTS - Build
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration ${{ parameters.buildConfiguration }}'
        workingDirectory: $(System.DefaultWorkingDirectory)

    - task: DotNetCoreCLI@2      
      displayName: RUN TESTS - Test
      inputs:
        command: 'test'
        arguments: '--no-build --no-restore --configuration ${{ parameters.buildConfiguration }}'
        workingDirectory: $(System.DefaultWorkingDirectory)
